module.exports = {"version":3,"file":"main.js","sources":["../src/Stats/StatsBK.ts","../src/LimpiarMemoria.ts","../src/Spawner.ts","../src/Roles/Roles.ts","../src/main.ts"],"sourcesContent":["// Put in your main loop\r\nexport function generarStatsBK() {\r\n    if (Memory.stats == undefined) {\r\n        Memory.stats = {};\r\n    }\r\n\r\n    let rooms = Game.rooms;\r\n    let spawns = Game.spawns;\r\n    for (let roomKey in rooms) {\r\n        let room: Room = Game.rooms[roomKey];\r\n        let isMyRoom = (room.controller ? room.controller.my : 0);\r\n        if (isMyRoom) {\r\n            Memory.stats['room.' + room.name + '.myRoom'] = 1;\r\n            Memory.stats['room.' + room.name + '.energyAvailable'] = room.energyAvailable;\r\n            Memory.stats['room.' + room.name + '.energyCapacityAvailable'] = room.energyCapacityAvailable;\r\n            if (room.controller !== undefined) {\r\n                Memory.stats['room.' + room.name + '.controllerProgress'] = room.controller.progress;\r\n                Memory.stats['room.' + room.name + '.controllerProgressTotal'] = room.controller.progressTotal;\r\n            }\r\n            let stored = 0;\r\n            let storedTotal = 0;\r\n\r\n            if (room.storage) {\r\n                stored = room.storage.store[RESOURCE_ENERGY];\r\n                storedTotal = room.storage.storeCapacity;\r\n                //storedTotal = room.storage.storeCapacity[RESOURCE_ENERGY];\r\n            }\r\n            else {\r\n                stored = 0;\r\n                storedTotal = 0;\r\n            }\r\n\r\n            Memory.stats['room.' + room.name + '.storedEnergy'] = stored;\r\n        }\r\n        else {\r\n            Memory.stats['room.' + room.name + '.myRoom'] = undefined;\r\n        }\r\n    }\r\n    Memory.stats['gcl.progress'] = Game.gcl.progress;\r\n    Memory.stats['gcl.progressTotal'] = Game.gcl.progressTotal;\r\n    Memory.stats['gcl.level'] = Game.gcl.level;\r\n    for (let spawnKey in spawns) {\r\n        let spawn: StructureSpawn = Game.spawns[spawnKey];\r\n        Memory.stats['spawn.' + spawn.name + '.defenderIndex'] = spawn.memory;\r\n        //Memory.stats['spawn.' + spawn.name + '.defenderIndex'] = spawn.memory['defenderIndex'];\r\n    }\r\n    /*\r\n    Memory.stats['cpu.CreepManagers'] = creepManagement;\r\n    Memory.stats['cpu.Towers'] = towersRunning;\r\n    Memory.stats['cpu.Links'] = linksRunning;\r\n    Memory.stats['cpu.SetupRoles'] = roleSetup;\r\n    Memory.stats['cpu.Creeps'] = functionsExecutedFromCreeps;\r\n    Memory.stats['cpu.SumProfiling'] = sumOfProfiller;\r\n    Memory.stats['cpu.Start'] = startOfMain;*/\r\n    Memory.stats['cpu.bucket'] = Game.cpu.bucket;\r\n    Memory.stats['cpu.limit'] = Game.cpu.limit;/*\r\n    Memory.stats['cpu.stats'] = Game.cpu.getUsed() - lastTick;*/\r\n    Memory.stats['cpu.getUsed'] = Game.cpu.getUsed();\r\n}\r\n","export function eliminarCreepsMuertos() {\r\n    // Automatically delete memory of missing creeps\r\n    for (const name in Memory.creeps) {\r\n        if (!(name in Game.creeps)) {\r\n            delete Memory.creeps[name];\r\n        }\r\n    }\r\n}","export function mainSpawner(spawn: StructureSpawn): void {\r\n    if (spawn.energy >= 200 && Object.keys(Memory.creeps).length <= 10) {\r\n        crearRecolector(spawn);\r\n        crearMejorador(spawn);\r\n        //crearConstructor(spawn);\r\n    }\r\n}\r\n\r\nfunction crearRecolector(spawn: StructureSpawn): void {\r\n    let options: SpawnOptions = {\r\n        memory: {\r\n            rol: 'Recolector',\r\n            room: spawn.room.name,\r\n            trabajando: false\r\n        } \r\n    }\r\n    spawn.spawnCreep([WORK, CARRY, MOVE], 'Recolector'+Date.now(), options );\r\n}\r\n\r\nfunction crearMejorador(spawn: StructureSpawn): void {\r\n    let options: SpawnOptions = {\r\n        memory: {\r\n            rol: 'Mejorador',\r\n            room: spawn.room.name,\r\n            trabajando: false\r\n        } \r\n    }\r\n    spawn.spawnCreep([WORK, CARRY, MOVE], 'Mejorador'+Date.now(), options );\r\n}\r\n\r\nfunction crearConstructor(spawn: StructureSpawn): void {\r\n    let options: SpawnOptions = {\r\n        memory: {\r\n            rol: 'Constructor',\r\n            room: spawn.room.name,\r\n            trabajando: false\r\n        } \r\n    }\r\n    spawn.spawnCreep([WORK, CARRY, MOVE], 'Constructor'+Date.now(), options );\r\n}\r\n","export function mainRoles(creep: Creep) {\r\n    recolectar(creep);\r\n    //llenarSpawn(creep);\r\n    mejorarControlador(creep);\r\n}\r\n\r\nfunction recolectar(creep: Creep): void {/*\r\n    //const creep = Game.creeps[nombreCreep];\r\n    if (creep.memory.trabajando === true && creep.carry.energy === 0) {\r\n      creep.memory.trabajando = false;\r\n    }\r\n    else if (creep.memory.trabajando === false && creep.carry.energy === creep.carryCapacity) {\r\n      creep.memory.trabajando = true;\r\n    }\r\n  \r\n    if (creep.memory.trabajando === true) {\r\n      if (creep.memory.rol === \"Recolector\") {\r\n        llenarSpawn(creep);\r\n      }\r\n      if (creep.memory.rol === \"Mejorador\") {\r\n        mejorarControlador(creep);\r\n      }\r\n    }\r\n    else {\r\n      const target = creep.pos.findClosestByRange(FIND_SOURCES_ACTIVE);\r\n      if (target) {\r\n        if (creep.harvest(target) === ERR_NOT_IN_RANGE) {\r\n          creep.moveTo(target);\r\n        }\r\n      }\r\n    }*/\r\n    if (creep.carry.energy < creep.carryCapacity) {\r\n        var sources = creep.room.find(FIND_SOURCES);\r\n        if (creep.harvest(sources[0]) == ERR_NOT_IN_RANGE) {\r\n            creep.moveTo(sources[0], { visualizePathStyle: { stroke: '#ffaa00' } });\r\n        }\r\n    }\r\n    else {\r\n        var targets = creep.room.find(FIND_STRUCTURES, {\r\n            filter: (structure) => {\r\n                return (structure.structureType == STRUCTURE_EXTENSION ||\r\n                    structure.structureType == STRUCTURE_SPAWN ||\r\n                    structure.structureType == STRUCTURE_TOWER) && structure.energy < structure.energyCapacity;\r\n            }\r\n        });\r\n        if (targets.length > 0) {\r\n            if (creep.transfer(targets[0], RESOURCE_ENERGY) == ERR_NOT_IN_RANGE) {\r\n                creep.moveTo(targets[0], { visualizePathStyle: { stroke: '#ffffff' } });\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction llenarSpawn(creep: Creep): void {\r\n    //const creep = Game.creeps[nombreCreep];\r\n    if (creep.transfer(Game.spawns[\"Spawn1\"], RESOURCE_ENERGY) === ERR_NOT_IN_RANGE) {\r\n        creep.moveTo(Game.spawns[\"Spawn1\"]);\r\n    }\r\n}\r\n\r\nfunction mejorarControlador(creep: Creep): void {\r\n    //const creep = Game.creeps[nombreCreep];\r\n    /*\r\n    if (creep.room.controller) {\r\n        if (creep.upgradeController(creep.room.controller) === ERR_NOT_IN_RANGE) {\r\n            creep.moveTo(creep.room.controller);\r\n        }\r\n    }\r\n    */\r\n    if (creep.memory.trabajando && creep.carry.energy == 0) {\r\n        creep.memory.trabajando = false;\r\n        creep.say('ðŸ”„ harvest');\r\n    }\r\n    if (!creep.memory.trabajando && creep.carry.energy == creep.carryCapacity) {\r\n        creep.memory.trabajando = true;\r\n        creep.say('âš¡ upgrade');\r\n    }\r\n\r\n    if (creep.memory.trabajando) {\r\n        if (creep.upgradeController(<StructureController> creep.room.controller) == ERR_NOT_IN_RANGE) {\r\n            creep.moveTo(<StructureController> creep.room.controller, { visualizePathStyle: { stroke: '#ffffff' } });\r\n        }\r\n    }\r\n    else {\r\n        var sources = creep.room.find(FIND_SOURCES);\r\n        if (creep.harvest(sources[0]) == ERR_NOT_IN_RANGE) {\r\n            creep.moveTo(sources[0], { visualizePathStyle: { stroke: '#ffaa00' } });\r\n        }\r\n    }\r\n}\r\n","import { generarStatsBK } from \"./Stats/StatsBK\";\r\nimport { exportStats } from \"./Stats/StatsAGS\";\r\n//import { Stats } from \"./Stats/StatsOvermind\";\r\n\r\nimport { eliminarCreepsMuertos } from \"./LimpiarMemoria\";\r\nimport { mainSpawner } from \"./Spawner\";\r\nimport { mainRoles } from \"./Roles/Roles\";\r\n\r\n// Compilar: npm run push-main\r\nexport const loop = function () {\r\n    console.log(`Current game tick is ${Game.time}`);\r\n    \r\n    eliminarCreepsMuertos();\r\n    \r\n    /*for (const nombreZona in Game.rooms) {\r\n        const zona = Game.rooms[nombreZona].\r\n        console.log(nombreZona);\r\n    }*/\r\n    for (const nombreSpawn in Memory.spawns) {\r\n        const spawn = Game.spawns[nombreSpawn];\r\n        mainSpawner(spawn);\r\n    }\r\n    \r\n    for (const nombreCreep in Memory.creeps) {\r\n        const creep = Game.creeps[nombreCreep];\r\n        mainRoles(creep);\r\n    }\r\n\r\n    generarStatsBK();\r\n    //exportStats();\r\n    //Stats.run(); \r\n};\r\n\r\n// IMPORTANTE, LEER Y APLICAR CUANDO SEA POSIBLE\r\n// https://docs.screeps.com/contributed/modifying-prototypes.html"],"names":[],"mappings":";;;;AAAA;AACA,SAAgB,cAAc;IAC1B,IAAI,MAAM,CAAC,KAAK,IAAI,SAAS,EAAE;QAC3B,MAAM,CAAC,KAAK,GAAG,EAAE,CAAC;KACrB;IAED,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;IACvB,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IACzB,KAAK,IAAI,OAAO,IAAI,KAAK,EAAE;QACvB,IAAI,IAAI,GAAS,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACrC,IAAI,QAAQ,IAAI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;QAC1D,IAAI,QAAQ,EAAE;YACV,MAAM,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;YAClD,MAAM,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,GAAG,kBAAkB,CAAC,GAAG,IAAI,CAAC,eAAe,CAAC;YAC9E,MAAM,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,GAAG,0BAA0B,CAAC,GAAG,IAAI,CAAC,uBAAuB,CAAC;YAC9F,IAAI,IAAI,CAAC,UAAU,KAAK,SAAS,EAAE;gBAC/B,MAAM,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,GAAG,qBAAqB,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC;gBACrF,MAAM,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,GAAG,0BAA0B,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC;aAClG;YACD,IAAI,MAAM,GAAG,CAAC,CAAC;YACf,IAAI,WAAW,GAAG,CAAC,CAAC;YAEpB,IAAI,IAAI,CAAC,OAAO,EAAE;gBACd,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;gBAC7C,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC;;aAE5C;iBACI;gBACD,MAAM,GAAG,CAAC,CAAC;gBACX,WAAW,GAAG,CAAC,CAAC;aACnB;YAED,MAAM,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,GAAG,eAAe,CAAC,GAAG,MAAM,CAAC;SAChE;aACI;YACD,MAAM,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,GAAG,SAAS,CAAC;SAC7D;KACJ;IACD,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC;IACjD,MAAM,CAAC,KAAK,CAAC,mBAAmB,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC;IAC3D,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC;IAC3C,KAAK,IAAI,QAAQ,IAAI,MAAM,EAAE;QACzB,IAAI,KAAK,GAAmB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QAClD,MAAM,CAAC,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,IAAI,GAAG,gBAAgB,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;;KAEzE;;;;;;;;;IASD,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC;IAC7C,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC;;IAE3C,MAAM,CAAC,KAAK,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;CACpD;;SC1De,qBAAqB;;IAEjC,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,MAAM,EAAE;QAC9B,IAAI,EAAE,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE;YACxB,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SAC9B;KACJ;CACJ;;SCPe,WAAW,CAAC,KAAqB;IAC7C,IAAI,KAAK,CAAC,MAAM,IAAI,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,IAAI,EAAE,EAAE;QAChE,eAAe,CAAC,KAAK,CAAC,CAAC;QACvB,cAAc,CAAC,KAAK,CAAC,CAAC;;KAEzB;CACJ;AAED,SAAS,eAAe,CAAC,KAAqB;IAC1C,IAAI,OAAO,GAAiB;QACxB,MAAM,EAAE;YACJ,GAAG,EAAE,YAAY;YACjB,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI;YACrB,UAAU,EAAE,KAAK;SACpB;KACJ,CAAA;IACD,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,EAAE,YAAY,GAAC,IAAI,CAAC,GAAG,EAAE,EAAE,OAAO,CAAE,CAAC;CAC5E;AAED,SAAS,cAAc,CAAC,KAAqB;IACzC,IAAI,OAAO,GAAiB;QACxB,MAAM,EAAE;YACJ,GAAG,EAAE,WAAW;YAChB,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI;YACrB,UAAU,EAAE,KAAK;SACpB;KACJ,CAAA;IACD,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,EAAE,WAAW,GAAC,IAAI,CAAC,GAAG,EAAE,EAAE,OAAO,CAAE,CAAC;CAC3E;;SC5Be,SAAS,CAAC,KAAY;IAClC,UAAU,CAAC,KAAK,CAAC,CAAC;;IAElB,kBAAkB,CAAC,KAAK,CAAC,CAAC;CAC7B;AAED,SAAS,UAAU,CAAC,KAAY;IAyB5B,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,aAAa,EAAE;QAC1C,IAAI,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC5C,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,gBAAgB,EAAE;YAC/C,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,kBAAkB,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC;SAC3E;KACJ;SACI;QACD,IAAI,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE;YAC3C,MAAM,EAAE,CAAC,SAAS;gBACd,OAAO,CAAC,SAAS,CAAC,aAAa,IAAI,mBAAmB;oBAClD,SAAS,CAAC,aAAa,IAAI,eAAe;oBAC1C,SAAS,CAAC,aAAa,IAAI,eAAe,KAAK,SAAS,CAAC,MAAM,GAAG,SAAS,CAAC,cAAc,CAAC;aAClG;SACJ,CAAC,CAAC;QACH,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YACpB,IAAI,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,IAAI,gBAAgB,EAAE;gBACjE,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,kBAAkB,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC;aAC3E;SACJ;KACJ;CACJ;AAED,AAOA,SAAS,kBAAkB,CAAC,KAAY;;;;;;;;;IASpC,IAAI,KAAK,CAAC,MAAM,CAAC,UAAU,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE;QACpD,KAAK,CAAC,MAAM,CAAC,UAAU,GAAG,KAAK,CAAC;QAChC,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;KAC3B;IACD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAU,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,aAAa,EAAE;QACvE,KAAK,CAAC,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC;QAC/B,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;KAC1B;IAED,IAAI,KAAK,CAAC,MAAM,CAAC,UAAU,EAAE;QACzB,IAAI,KAAK,CAAC,iBAAiB,CAAuB,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,gBAAgB,EAAE;YAC1F,KAAK,CAAC,MAAM,CAAuB,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,kBAAkB,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC;SAC5G;KACJ;SACI;QACD,IAAI,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAC5C,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,gBAAgB,EAAE;YAC/C,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,kBAAkB,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC;SAC3E;KACJ;CACJ;;ACjFD;AACA,MAAa,IAAI,GAAG;IAChB,OAAO,CAAC,GAAG,CAAC,wBAAwB,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;IAEjD,qBAAqB,EAAE,CAAC;;;;;IAMxB,KAAK,MAAM,WAAW,IAAI,MAAM,CAAC,MAAM,EAAE;QACrC,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QACvC,WAAW,CAAC,KAAK,CAAC,CAAC;KACtB;IAED,KAAK,MAAM,WAAW,IAAI,MAAM,CAAC,MAAM,EAAE;QACrC,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QACvC,SAAS,CAAC,KAAK,CAAC,CAAC;KACpB;IAED,cAAc,EAAE,CAAC;;;CAGpB,CAAC;;iEAG+D;;;;"};